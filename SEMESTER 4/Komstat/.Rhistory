m=par[1]
s=par[2]
n=length(x)
# log of the normal likelihood
# -n/2 * log(2*pi*s^2) + (-1/(2*s^2)) * sum((x-m)^2)
ll = -(n/2)*(log(2*pi*s^2)) + (-1/(2*s^2)) * sum((x-m)^2)
# return the negative to maximize rather than minimize
return(-ll)
}
# log likelihood curve
plot(seq(-3,3,.1),-1*sapply(seq(-3,3,.1),FUN=llik,par=c(0,1)),type='l',
ylab='',xlab='')
# and plot it just to make sure
# seq(-3,3,.1) Membuat urutan angka dari -3 ke 3 dengan langkah 0.1.
plot(seq(-3,3,.1),
sapply(seq(-3,3,.1),
FUN=norm_lik,
m=0,
s=1),
type='l',
ylab='',
xlab='',
main='Gaussian Normal')
#create a likelihood function for normal distribution
# par bentuknya vector numeric
# optim() pada dasarnya mencari nilai minimum dari fungsi yang diberikan.
llik = function(x,par){
m=par[1]
s=par[2]
n=length(x)
# log of the normal likelihood
# -n/2 * log(2*pi*s^2) + (-1/(2*s^2)) * sum((x-m)^2)
ll = -(n/2)*(log(2*pi*s^2)) + (-1/(2*s^2)) * sum((x-m)^2)
# return the negative to maximize rather than minimize
return(-ll)
}
# log likelihood curve
plot(seq(-3,3,.1),-1*sapply(seq(-3,3,.1),FUN=llik,par=c(0,1)),type='l',
ylab='',xlab='')
# negative log likelihood curve
# just to see what the funciton produces we can plot it.
plot(seq(-3,3,.1),sapply(seq(-3,3,.1),FUN=llik,par=c(0,1)),type='l',
ylab='',xlab='')
# call optim with the starting values 'par',
# the function (here 'llik'),
# and the observations 'x'
res0 = optim(par=c(.5,.5), llik, x=x)
library(knitr)
print(kable(
cbind('direct'=c('mean'=mean(x),'sd'=sd(x)),
'optim'=res0$par),digits=3))
#Bivariate example (regression) #least square (cari error terus dikuadratkan)
# our totally made up data
MomEd = c(0, 1, 3, 4) #mom's education
CGPA = c(3.0, 3.2, 3.3, 3.7) #children's GPA
# fit a linear model
coef(lm(CGPA ~ MomEd)->lm0)
# sum of squares function
SS_min = function(data,par){
b0=par[1]
b1=par[2]
loss = with(data, sum((b0+b1*x - y)^2)) #ini least square
return(loss)
}
# data on mom's ed and Children GPA from above
dat=data.frame(x=MomEd,y=CGPA)
# min resid sum of squares
res1a = optim(par=c(.5,.5),SS_min, data=dat)
# direct comparison
print(kable(cbind('lm()'=coef(lm0),'SS_min'=res1a$par),digits=4))
# slope effect
b1 = .85
# simulated data
x = 1:60
dat = data.frame(x=x,y=(x*b1)+rnorm(60))
# from the lm() function
lm1 = lm(y~x, data=dat)
lm1
# different start values
res1 = optim(par=c(.01,1),SS_min, data=dat)
res1$par
op=par(mfrow=c(1,2),mar=c(3,3,3,1),pty='s')
# scatterplot
with(dat,plot(x,y,col='grey60',main='lm() results'))
# regression line from lm()
abline(lm1,lwd=2)
with(dat,plot(x,y,col='grey60',main='optim() results'))
# from the Min SS
abline(res1$par[1],res1$par[2],col='red',lty=1,lwd=2)
#estimasi parameter distribusi poisson
set.seed(123)
#first simulate some normal data with expected mean of 0 and sd of 1
x2 = rpois(100, 20)
# histogram (in the fashion of SPSS)
hist(x2, freq=FALSE,col='tan')
lines(density(x2),col='red',lwd=2)
pmf_pois = function(x, lambda) {
y = exp(lambda) * 1 / factorial(x) * lambda ^ x
return(y)
}
plot(seq(0, 20, 1),
sapply(seq(0, 20, 1),
FUN = pmf_pois,
lambda = 4),
type='l',
main='PMF Poisson lambda 4')
llik = function(x, par) {
lambda = par[1]
n = length(x)
ll = -n * lambda - sum(log(factorial(x))) + log(lambda) * sum(x)
return(-ll)
}
res0 = optim(par=c(0.5), llik,x=x2)
res0$par
library(knitr)
print(kable(
cbind(
'direct'=c('mean'=mean(x2)),
'optim'=res0$par
), digits=3))
# Distribusi Bernouli
# generate data
set.seed(123)
library(Rlab)
x <- rbern(100, 0.5)
# likelihood function
bernoulli_lik <- function(x, p) {
prod(p^x * (1 - p)^(1 - x))
}
# negative log-likelihood function
bernoulli_nllik <- function(x, p) {
-sum(log(bernoulli_lik(x, p)))
}
# estimate parameter
res_bernoulli <- optimize(f = bernoulli_nllik, interval = c(0, 1), x = x)
# print result
print(paste0("MLE estimate for Bernoulli distribution: ", res_bernoulli$minimum))
#Distribusi Binomial
# generate data
set.seed(123)
x <- rbinom(100, 10, 0.5)
# likelihood function
binomial_lik <- function(x, n, p) {
prod(choose(n, x) * p^x * (1 - p)^(n - x))
}
# negative log-likelihood function
binomial_nllik <- function(x, n, p) {
-sum(log(binomial_lik(x, n, p)))
}
# estimate parameter
res_binomial <- optim(par = c(0.3), binomial_nllik, x = x, n = 10)
# print result
print(paste0("MLE estimate for Binomial distribution: ", res_binomial$par))
#Distribusi Exponensial
# generate data
set.seed(123)
x <- rexp(120, 5)
# likelihood function
exponential_lik <- function(x, lambda) {
prod(lambda * exp(-lambda * x))
}
# negative log-likelihood function
exponential_nllik <- function(x, lambda) {
-sum(log(exponential_lik(x, lambda)))
}
# estimate parameter
res_exponential <- optim(par = 0.5, exponential_nllik, x = x)
# print result
print(paste0("MLE estimate for Exponential distribution: ", res_exponential$par))
# Distribusi Gamma
# generate data
set.seed(123)
x <- rgamma(50, 1, 2)
# likelihood function
gamma_lik <- function(x, shape, rate) {
prod(dgamma(x, shape, rate))
}
# negative log-likelihood function
gamma_nllik <- function(x, shape, rate) {
-sum(log(gamma_lik(x, shape, rate)))
}
# estimate parameter
res_gamma <- optim(par = c(0.5, 0.5), gamma_nllik, x = x, shape = 5)
# print result
print(paste0("MLE estimate for Gamma distribution: ", res_gamma$par))
#pareto
set.seed(123)
library(Pareto)
x <- rPareto(50, 2, 1)
pmfpareto <-function(x, t, alpha){
pem = alpha * t^alpha
pen = x^(alpha+1)
return(pem/pen)
}
#likelihood
logpareto <- function(x,par){
t <- par[1]
alpha <- par[2]
logpare = sum(log(pmfpareto(x,t,alpha)))
return(-logpare)
}
respar <- optim(par = c(5, 5), logpareto, x?=?x)
##=====ANOVA=====
setwd("D:/UNAIR/SEMESTER 4/Komstat")
#memanggil data
Data1 = read.table("Data Praktikum 8.1.txt", header = TRUE, colClasses = c("numeric", "factor"))
View(Data1)
y1 = Data1$Asam_Askorbat
perlakuan = Data1$Varietas
summary(Data1)
#ANOVA
ANOVA1 <- aov(y1 ~ perlakuan, data = Data1)
summary(ANOVA1)
#No. 2 (RAKL)
#H0: Tidak Terdapat pengaruh penyinaran dan penyiraman
#H1: Terdapat pengaruh penyinaran dan penyiraman
#Memanggil Data
Data2 = read.table("Data Praktikum 8.2.txt", header = TRUE, colClasses = c("numeric", "factor", "factor"))
Data2
y2 = Data2$Pertumbuhan_Tanaman
Perlakuan_A = Data2$Penyiraman
Perlakuan_B = Data2$Penyinaran_Matahari
summary(Data2)
#ANOVA
#-----Tanpa Interaksi-----
ANOVA2 <- aov(y2 ~ Perlakuan_A + Perlakuan_B, data = Data2)
summary(ANOVA2)
#-----dengan interaksi-----
INTERACTION <- aov(y2 ~ Perlakuan_A * Perlakuan_B, data = Data2)
summary(INTERACTION)
#Memanggil Data
#H0: Tidak ada pengaruh
#H1: Ada pengaruh
Data3 = read.table("Data Praktikum 8.3.txt", header = TRUE, colClasses = c("numeric", "factor", "factor"))
y3 = Data3$Hardness
Data3
Treatments = Data3$Tip
Block = Data3$Block
summary(Data3)
#ANOVA
ANOVA3 <- aov(y3 ~ Treatments + Block, data = Data3)
summary(ANOVA3)
#No 4
#LSD/RBSL (rancangan bujur sangkar latin)
#memanggil data
#H0: Tidak terdapat pengaruh
#H1: Terdapat Pengaruh
Data4 = read.table("Data Praktikum 8.4.txt", header = TRUE, colClasses = c("factor", "numeric", "factor", "factor"))
Data4
summary(Data4)
#subset Data
Perlakuan= Data4$Perlakuan
Perlakuan
y1= Data4$Pertumbuhan_Tanaman_Jagung
y1
Baris= Data4$Baris
Baris
Kolom= Data4$Kolom
Kolom
#ANOVA RBSL
ANOVA4 <- aov(y1 ~ Perlakuan+Baris+Kolom, data = Data4)
summary(ANOVA4)
#No 5 (Rancangan Faktorial)
#H0: Tidak terdapat pengaruh
#H1: Terdapat Pengaruh
#Import Data
Data5 = read.table("Data Praktikum 8.5.txt", header = TRUE, colClasses = c("numeric", "factor", "factor"))
Data5
summary(Data5)
#Subset Data
y2=Data5$Daya_Tahan_Battery
y2
jb=Data5$Jenis_Bahan
jb
temp=Data5$Temperatur
temp
#ANOVA Faktorial_RAL
ANOVA2 <- aov(y2 ~ jb+temp+jb*temp, data = Data5)
summary(ANOVA2)
#---------------------------------
ANOVA2_v2 <- aov(y2 ~ jb*temp, data = Data5)
summary(ANOVA2_v2)
?aov
#uji Z 1 populasi #jika jumlah n > 30
#h0: miu <= miu0
#h1: miu > miu0
#right tail
zsum.test(mean.x = 1200000, sigma.x = 600000, n.x = 16,
alternative = "greater", mu = 0,
conf.level = 0.95) #H0: <=, H1: > (greater)
#=====UJI HIPOTESIS=====
library(BSDA)
#uji Z 1 populasi #jika jumlah n > 30
#h0: miu <= miu0
#h1: miu > miu0
#right tail
zsum.test(mean.x = 1200000, sigma.x = 600000, n.x = 16,
alternative = "greater", mu = 0,
conf.level = 0.95) #H0: <=, H1: > (greater)
#pvalue
xbar = 1200000
miu = 0
n = 16
s = 600000
z = (xbar - miu)/(s/sqrt(n))
#left tail
pvalue = pnorm(z, lower.tail = FALSE)
pvalue2 = 1-pnorm(z) #sama kaya pvalue atas ini
#twotail
pvalue3 = 2*pvalue
#pvalue4 = 2*pvalue2
pvalue
pvalue3
#right tail
pnorm(z, lower.tail = FALSE)
#left tail
#h0: miu >= miu0
#h1: miu < miu0
zsum.test(mean.x = 1200000, sigma.x = 600000, n.x = 16,
alternative = "less", mu = 0,
conf.level = 0.95) #H0: <=, H1: > (greater)
#uji t 1 populasi #jika jumlah sampel n < 30
#H0: miu = miu0
#H1: miu =/ miu0
tsum.test(mean.x = 25, s.x = 6.4, n.x = 20,
alternative = "two.sided", mu = 0,
var.equal = TRUE, conf.level = 0.95)
IR64=c(4.5,4.8,4,3.6,3.8,5,4,3.9,4.8)
MSP=c(6.4,6.5,4.2,4,5.8,5.9,6.2,3.8,2.5,3.6,7,8)
t.test(MSP, alternative = "two.sided")
tsum.test(mean.x = mean(MSP), s.x = sd(MSP), n.x = length(MSP),
alternative = "two.sided", mu = 0,
var.equal = TRUE, conf.level = 0.95)
#uji 2 populasi independen/tak berpasangan
#H0: miu1-miu2 = 0
#H1: miu1-miu2 =/ 0
t.test(x = IR64, y = MSP, alternative = "two.sided",
paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
#uji t berpasangan
Orang.ke=seq(1:10)
BB.Sebelum=c(57,69,56,67,55,56,62,67,67,56)
BB.Sesudah=c(55,70,56,65,54,55,64,65,67,54)
data=data.frame(Orang.ke,BB.Sebelum,BB.Sesudah)
#H0: miu1-miu2 <= 0
#H1: miu1-miu2 > 0
t.test(x = data$BB.Sebelum, y = data$BB.Sesudah, alternative = "greater",
mu = 0.5, paired = TRUE, var.equal = TRUE,
conf.level = 0.95)
#==== Normal Distribution ====
# Histogram
#make this example reproducible
set.seed(0)
#create data that follows a normal distribution
normal_data <- rnorm(200)
#create data that follows an exponential distribution
non_normal_data <- rexp(200, rate=3)
#define plotting region
par(mfrow=c(1,2))
#create histogram for both datasets
hist(normal_data, col='steelblue', main='Normal')
hist(non_normal_data, col='steelblue', main='Non-normal')
#QQ Plot
#make this example reproducible
set.seed(0)
#create data that follows a normal distribution
normal_data <- rnorm(200)
#create data that follows an exponential distribution
non_normal_data <- rexp(200, rate=3)
#define plotting region
par(mfrow=c(1,2))
#create Q-Q plot for both datasets
qqnorm(normal_data, main='Normal')
qqline(normal_data)
qqnorm(non_normal_data, main='Non-normal')
qqline(non_normal_data)
#Shapiro Wilk
#make this example reproducible
set.seed(0)
#create data that follows a normal distribution
normal_data <- rnorm(200)
#perform shapiro-wilk test
shapiro.test(normal_data)
#create data that follows an exponential distribution
non_normal_data <- rexp(200, rate=3)
#perform shapiro-wilk test
shapiro.test(non_normal_data)
#Kolmogorov Smirnov
#make this example reproducible
set.seed(0)
#create data that follows a normal distribution
normal_data <- rnorm(200)
#perform kolmogorov-smirnov test
ks.test(normal_data, 'pnorm')
#create data that follows an exponential distribution
non_normal_data <- rexp(200, rate=3)
#perform kolmogorov-smirnov test
ks.test(non_normal_data, 'pnorm')
#=====UJI HIPOTESIS=====
library(BSDA)
#uji Z 1 populasi #jika jumlah n > 30
#h0: miu <= miu0
#h1: miu > miu0
#right tail
zsum.test(mean.x = 1200000, sigma.x = 600000, n.x = 16,
alternative = "greater", mu = 0,
conf.level = 0.95) #H0: <=, H1: > (greater)
#pvalue
xbar = 1200000
miu = 0
n = 16
s = 600000
z = (xbar - miu)/(s/sqrt(n))
#left tail
pvalue = pnorm(z, lower.tail = FALSE)
pvalue2 = 1-pnorm(z) #sama kaya pvalue atas ini
#twotail
pvalue3 = 2*pvalue
#pvalue4 = 2*pvalue2
pvalue
pvalue3
#right tail
pnorm(z, lower.tail = FALSE)
#left tail
#h0: miu >= miu0
#h1: miu < miu0
zsum.test(mean.x = 1200000, sigma.x = 600000, n.x = 16,
alternative = "less", mu = 0,
conf.level = 0.95) #H0: <=, H1: > (greater)
#left tail
#h0: miu >= miu0
#h1: miu < miu0
zsum.test(mean.x = 1200000, sigma.x = 600000, n.x = 16,
alternative = "less", mu = 0,
conf.level = 0.95) #H0: <=, H1: > (greater)
#uji t 1 populasi #jika jumlah sampel n < 30
#H0: miu = miu0
#H1: miu =/ miu0
tsum.test(mean.x = 25, s.x = 6.4, n.x = 20,
alternative = "two.sided", mu = 0,
var.equal = TRUE, conf.level = 0.95)
IR64=c(4.5,4.8,4,3.6,3.8,5,4,3.9,4.8)
MSP=c(6.4,6.5,4.2,4,5.8,5.9,6.2,3.8,2.5,3.6,7,8)
t.test(MSP, alternative = "two.sided")
tsum.test(mean.x = mean(MSP), s.x = sd(MSP), n.x = length(MSP),
alternative = "two.sided", mu = 0,
var.equal = TRUE, conf.level = 0.95)
#uji 2 populasi independen/tak berpasangan
#H0: miu1-miu2 = 0
#H1: miu1-miu2 =/ 0
t.test(x = IR64, y = MSP, alternative = "two.sided",
paired = FALSE, var.equal = TRUE,
conf.level = 0.95)
#uji t berpasangan
Orang.ke=seq(1:10)
BB.Sebelum=c(57,69,56,67,55,56,62,67,67,56)
BB.Sesudah=c(55,70,56,65,54,55,64,65,67,54)
data=data.frame(Orang.ke,BB.Sebelum,BB.Sesudah)
#H0: miu1-miu2 <= 0
#H1: miu1-miu2 > 0
t.test(x = data$BB.Sebelum, y = data$BB.Sesudah, alternative = "greater",
mu = 0.5, paired = TRUE, var.equal = TRUE,
conf.level = 0.95)
#==== Normal Distribution ====
# Histogram
#make this example reproducible
set.seed(0)
#create data that follows a normal distribution
normal_data <- rnorm(200)
#create data that follows an exponential distribution
non_normal_data <- rexp(200, rate=3)
#define plotting region
par(mfrow=c(1,2))
#create histogram for both datasets
hist(normal_data, col='steelblue', main='Normal')
hist(non_normal_data, col='steelblue', main='Non-normal')
#QQ Plot
#make this example reproducible
set.seed(0)
#create data that follows a normal distribution
normal_data <- rnorm(200)
#create data that follows an exponential distribution
non_normal_data <- rexp(200, rate=3)
#define plotting region
par(mfrow=c(1,2))
#create Q-Q plot for both datasets
qqnorm(normal_data, main='Normal')
qqline(normal_data)
qqnorm(non_normal_data, main='Non-normal')
qqline(non_normal_data)
#Shapiro Wilk
#make this example reproducible
set.seed(0)
#create data that follows a normal distribution
normal_data <- rnorm(200)
#perform shapiro-wilk test
shapiro.test(normal_data)
#create data that follows an exponential distribution
non_normal_data <- rexp(200, rate=3)
#perform shapiro-wilk test
shapiro.test(non_normal_data)
#Kolmogorov Smirnov
#make this example reproducible
set.seed(0)
#create data that follows a normal distribution
normal_data <- rnorm(200)
#perform kolmogorov-smirnov test
ks.test(normal_data, 'pnorm')
#create data that follows an exponential distribution
non_normal_data <- rexp(200, rate=3)
#perform kolmogorov-smirnov test
ks.test(non_normal_data, 'pnorm')
