}
return(means)
}
set.seed(100)
hasil1 <- bootstrap_mean(data1, 35)
hist(hasil1, main = "Histogram",
xlab = "Mean Values", col = "lightblue", breaks = 10)
qqnorm(hasil1)
qqline(hasil1)
print(mean(results1))
set.seed(100)
data2 <- runif(10, min = 2, max = 6)  # a=2, b=6
hasil2 <- bootstrap_mean(data2, 200)
hist(hasil2, main = "Histogram",
xlab = "Mean Values", col = "lightgreen", breaks = 15)
qqnorm(hasil2)
qqline(hasil2)
print(mean(results2))
library(boot)
data3 <- c(3.5, 4.0, 2.8, 5.1, 3.7, 4.4, 3.2, 4.9, 3.0, 3.8, 4.1, 2.9)
mean_stat <- function(data, indices) {
return(mean(data[indices]))
}
set.seed(100)
boot_result <- boot(data = data3, statistic = mean_stat, R = 900)
boot_ci <- boot.ci(boot_result, type = c("perc"))
print(boot_ci)
hist(boot_result$t,
main = "Histogram of Bootstrap Means (n=900)",
xlab = "Mean Values",
col = "lightpink",
breaks = 30)
abline(v = boot_ci$percent[4:5], col = "red", lwd = 2, lty = 2)
abline(v = mean(boot_result$t), col = "blue", lwd = 2
library(boot)
data3 <- c(3.5, 4.0, 2.8, 5.1, 3.7, 4.4, 3.2, 4.9, 3.0, 3.8, 4.1, 2.9)
mean_stat <- function(data, indices) {
return(mean(data[indices]))
}
set.seed(100)
boot_result <- boot(data = data3, statistic = mean_stat, R = 900)
boot_ci <- boot.ci(boot_result, type = c("perc"))
print(boot_ci)
hist(boot_result$t,
main = "Histogram of Bootstrap Means (n=900)",
xlab = "Mean Values",
col = "lightpink",
breaks = 30)
abline(v = boot_ci$percent[4:5], col = "red", lwd = 2, lty = 2)
abline(v = mean(boot_result$t), col = "blue", lwd = 2)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
set.seed(123)
x = range(100)
n = length (x)
partial = rep(0,n)
for (i in 1:n) {
partial[i] = mean(x[-1])
}
partial
psedous = (n*mean(x)) - (n-1)*partial
jack.est = mean(psedous)
jack.se = sqrt(var(psedous)/n)
ci = qt(0.05/2, n-1, lower.tail = FALSE)*jack.se
lower = jack.est - ci
upper = jack.est + ci
lower
upper
# 1.
mean_x = 160
# 1.
n = 1000
mean_x = 160
sd_x = 4
se = sd_x / sqrt(n)
z = qnorm(0.05 / 2, lower.tail = FALSE)
ci = z * se
lower = mean_x - ci
upper = mean_x + ci
se
lower
upper
psedous = n * mean(x) - (n - 1) * partial
# 2.
x = c(25, 10, 3, 2, 7, 20, 30, 9, 15)
n = length(x)
partial = rep(0, n)
for (i in 1:n) {
partial[i] = mean(x[-i])
}
psedous = n * mean(x) - (n - 1) * partial
jack.est = mean(psedous)
jack.se = sqrt(var(psedous) / n)
ci = qt(0.05 / 2, n - 1, lower.tail = FALSE) * jack.se
lower = jack.est - ci
upper = jack.est + ci
jack.est
jack.se
lower
upper
bias = mean(x) - jack.est
bias
1
# 3.
x = c(98.5, 101.2, 99.0, 100.3, 97.8, 102.1, 98.9, 100.0, 99.7, 101.5)
n = length(x)
partial = rep(0, n)
for (i in 1:n) {
partial[i] = mean(x[-i])
}
pseudovalue = n * mean(x) - (n - 1) * partial
jack.est = mean(pseudovalue)
jack.se = sqrt(var(pseudovalue) / n)
ci = qt(0.05 / 2, n - 1, lower.tail = FALSE) * jack.se
lower = jack.est - ci
upper = jack.est + ci
jack.est
jack.se
lower
upper
partial
library(stats4)
library(MASS)
xpoisson=rpois(n=300, mu=2)
xpoisson <- rpois(n = 300, lambda = 2)
xpoisson <- rpois(n = 300, mu = 2)
lpoisson = function(lambda)
{
n = length(xpoisson)
x = xpoisson
for (i in 1:n) {
lnlikeli = (n * lambda - sum(x) * log(lambda) + sum(log(factorial(x))))
}
return(lnlikeli)
}
estpoisson = mle(minuslogl = lpoisson, start = list(lambda=2))
summary(estpoisson)
?mle
c('mean' = mean(x), 'sd' = sd(x))
# Tanpa function bawaan
set.seed(123)
x = rnorm(100)
x = x/sd(x) * 8
x = x/mean(x) * 10
c('mean' = mean(x), 'sd' = sd(x))
x = x/sd(x) * 8
x = x-mean(x) * 10
c('mean' = mean(x), 'sd' = sd(x))
x = x/sd(x) * 8
x = x-mean(x) + 10
c('mean' = mean(x), 'sd' = sd(x))
hist(x, freq = FALSE, col = 'tan')
lines(density(x), col = 'red', lwd = 2)
norm_lik = function(x, m, s) {
y = 1/sqrt(2*pis^2) * exp(-1/2)
}
llik = function(x.par) {
m = par[1]
s = par[2]
n = length(x)
ll = -(n/2) * (log(2*pi*s^2)) + (-1/(2*s^2)) * sum((x-m)^2)
return(-ll)
}
?sapply
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), FUN=norm_lik, m=0, s=1), type = 'l', ylab = '', xlab = '', main = 'Gaussian Normal')
y = 1/sqrt(2*pi^2) * exp(-1/2)
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), FUN=norm_lik, m=0, s=1), type = 'l', ylab = 'Density', xlab = 'x', main = 'Gaussian Normal')
y = 1/sqrt(2*pi^2) * exp(-1/2)
norm_lik = function(x, m, s) {
y = 1/sqrt(2*pi^2) * exp(-1/2)
}
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), FUN=norm_lik, m=0, s=1), type = 'l', ylab = 'Density', xlab = 'x', main = 'Gaussian Normal')
y = 1/sqrt(2*pi*s2) * exp((-1/(2*s^2))*(x-m)^2)
1 / (sqrt(2 * pi) * s) * exp(-((x - m)^2) / (2 * s^2))
norm_lik = function(x, m, s) {
1 / (sqrt(2 * pi) * s) * exp(-((x - m)^2) / (2 * s^2))
}
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), FUN=norm_lik, m=0, s=1), type = 'l', ylab = 'Density', xlab = 'x', main = 'Gaussian Normal')
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), FUN=norm_lik, m=0, s=1), type = 'l', ylab = 'Density', xlab = 'x', main = 'Gaussian Normal')
par(mar = c(4, 4, 2, 1))
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), FUN=norm_lik, m=0, s=1), type = 'l', ylab = 'Density', xlab = 'x', main = 'Gaussian Normal')
llik = function(x.par) {
m = par[1]
s = par[2]
n = length(x)
ll = -(n/2) * (log(2*pi*s^2)) + (-1/(2*s^2)) * sum((x-m)^2)
return(-ll)
}
# kurva ll
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), FUN=llik, par=c(0,1)), type = 'l', ylab = '', xlab = '',)
ll = -(n/2) * (log(2*pi*s^2)) + (-1/(2*s^2)) * sum((x-m)^2)
return(-ll)
llik = function(x.par) {
m = par[1]
s = par[2]
n = length(x)
ll = -(n/2) * (log(2*pi*s^2)) + (-1/(2*s^2)) * sum((x-m)^2)
return(-ll)
}
# kurva ll
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), FUN=llik, par=c(0,1)), type = 'l', ylab = '', xlab = '',)
# kurva ll
plot(seq(-3, 3, .1), sapply(seq(-3, 3, .1), function(m) llik(x, par=c(m,1))),
type = 'l', ylab = '', xlab = '', main = '')
library(stats4)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
n = length(xbinom)
x = xbinom
lnlikeli = -sum(lchoose(n_binom, x) + x * log(p) + (n_binom - x) * log(1 - p))
return(lnlikeli)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0.0001, upper = 0.9999)
summary(estbinom)
library(stats4)
xbinom <- rbinom(n = 30, size = 20, prob = 0.4)
lbinom = function(p) {
n = 20
x = xbinom
lnlikeli = -sum(dbinom(x, size = n, prob = p, log = TRUE))
return(lnlikeli)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), lower = 0, upper = 1)
xbinom <- rbinom(n = 30, size = 20, prob = 0.4)
lbinom = function(p) {
n = 20
x = xbinom
lnlikeli = -sum(dbinom(x, size = n, prob = p, log = TRUE))
return(lnlikeli)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5))
summary(estbinom)
xbinom <- rbinom(n = 300, size = 10, p = 0.5)
lbinom = function(p) {
n = length(xbinom)
k = sum(xbinom)
lnlikeli = -sum(dbinom(xbinom, size = 10, p = p, log = TRUE))
return(lnlikeli)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5))
summary(estbinom)
xgamma <- rgamma(n = 300, shape = 2, rate = 1)
lgamma = function(shape, rate) {
lnlikeli = -sum(dgamma(xgamma, shape = shape, rate = rate, log = TRUE))
return(lnlikeli)
}
estgamma = mle(minuslogl = lgamma, start = list(shape = 2, rate = 1))
summary(estgamma)
xpareto <- rpareto(n = 300, shape = 2, scale = 1)
library(stats4)
library(VGAM)
xpareto <- rpareto(n = 300, location = 1, shape = 2)
install.packages("VGAM")
library(stats4)
library(VGAM)
xbinom <- rbinom(n = 300, size = 10, p = 0.5)
lbinom = function(p) {
n = length(xbinom)
k = sum(xbinom)
lnlikeli = -sum(dbinom(xbinom, size = 10, p = p, log = TRUE))
return(lnlikeli)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5))
summary(estbinom)
xgamma <- rgamma(n = 300, shape = 2, rate = 1)
lgamma = function(shape, rate) {
lnlikeli = -sum(dgamma(xgamma, shape = shape, rate = rate, log = TRUE))
return(lnlikeli)
}
estgamma = mle(minuslogl = lgamma, start = list(shape = 2, rate = 1))
summary(estgamma)
xpareto <- rpareto(n = 300, location = 1, shape = 2)
library(stats4)
library(MASS)
set.seed(123)
n <- 10
p_true <- 0.3
xbinom <- rbinom(n = 200, size = n, prob = p_true)
lbinom <- function(p) {
n_size <- 10
x <- xbinom
-sum(dbinom(x, size = n_size, prob = p, log = TRUE))
}
estbinom <- mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0.0001, upper = 0.9999)
summary(estbinom)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0, upper = 1)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0, upper = 1)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
if (p <= 0 || p >= 1) return(Inf)
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0, upper = 1)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
if (p <= 0 || p >= 1) return(Inf)
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0, upper = 1)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
if (p <= 0 || p >= 1) return(Inf)
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0, upper = 1)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
if (p <= 0 || p >= 1) return(Inf)
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(-llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0, upper = 1)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(-llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0, upper = 1)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(-llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0, upper = 1)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0.0001, upper = 0.9999)
summary(estbinom)
xgamma <- rgamma(n = 300, shape = 2, rate = 1.5)
lgamma = function(alpha, lambda) {
x = xgamma
n = length(x)
lnlikeli = -sum(dgamma(x, shape = alpha, rate = lambda, log = TRUE))
return(lnlikeli)
}
estgamma = mle(minuslogl = lgamma, start = list(alpha = 1, lambda = 1), method = "L-BFGS-B", lower = c(0.0001, 0.0001))
summary(estgamma)
alpha_true <- 2
xm <- 1
xpareto <- (runif(300) ^ (-1/alpha_true)) * xm
lpareto = function(alpha) {
x = xpareto
xm = min(x)
n = length(x)
lnlikeli = -sum(log(alpha * xm^alpha / x^(alpha + 1)))
return(lnlikeli)
}
estpareto = mle(minuslogl = lpareto, start = list(alpha = 1), method = "L-BFGS-B", lower = 0.0001)
summary(estpareto)
library(stats4)
library(MASS)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0.0001, upper = 0.9999)
summary(estbinom)
xgamma <- rgamma(n = 300, shape = 2, rate = 1.5)
lgamma = function(alpha, lambda) {
x = xgamma
n = length(x)
llik = -sum(dgamma(x, shape = alpha, rate = lambda, log = TRUE))
return(llik)
}
estgamma = mle(minuslogl = lgamma, start = list(alpha = 1, lambda = 1), method = "L-BFGS-B", lower = c(0.0001, 0.0001))
summary(estgamma)
alpha_true <- 2
xm <- 1
xpareto <- (runif(300) ^ (-1/alpha_true)) * xm
lpareto = function(alpha) {
x = xpareto
xm = min(x)
n = length(x)
llik = -sum(log(alpha * xm^alpha / x^(alpha + 1)))
return(llik)
}
estpareto = mle(minuslogl = lpareto, start = list(alpha = 1), method = "L-BFGS-B", lower = 0.0001)
summary(estpareto)
alpha_true <- 2
xm <- 1
xpareto <- (runif(300) ^ (-1/alpha_true)) * xm
lpareto = function(alpha) {
x = xpareto
xm = min(x)
n = length(x)
llik = -sum(log(alpha * xm^alpha / x^(alpha + 1)))
return(llik)
}
estpareto = mle(minuslogl = lpareto, start = list(alpha = 1), method = "L-BFGS-B", lower = 0.0001)
summary(estpareto)
set.seed(123)
xbinom <- rbinom(n = 300, size = 10, prob = 0.3)
n_binom <- 10
lbinom = function(p) {
n = length(xbinom)
x = xbinom
llik = -sum(dbinom(x, size = n_binom, prob = p, log = TRUE))
return(llik)
}
estbinom = mle(minuslogl = lbinom, start = list(p = 0.5), method = "L-BFGS-B", lower = 0.0001, upper = 0.9999)
summary(estbinom)
set.seed(123)
xgamma <- rgamma(n = 300, shape = 2, rate = 1.5)
lgamma = function(alpha, lambda) {
x = xgamma
n = length(x)
llik = -sum(dgamma(x, shape = alpha, rate = lambda, log = TRUE))
return(llik)
}
estgamma = mle(minuslogl = lgamma, start = list(alpha = 1, lambda = 1), method = "L-BFGS-B", lower = c(0.0001, 0.0001))
summary(estgamma)
set.seed(123)
alpha_true <- 2
xm <- 1
xpareto <- (runif(300) ^ (-1/alpha_true)) * xm
lpareto = function(alpha) {
x = xpareto
xm = min(x)
n = length(x)
llik = -sum(log(alpha * xm^alpha / x^(alpha + 1)))
return(llik)
}
estpareto = mle(minuslogl = lpareto, start = list(alpha = 1), method = "L-BFGS-B", lower = 0.0001)
summary(estpareto)
set.seed(123)
alpha_asli <- 2
xm <- 1
xpareto <- (runif(300) ^ (-1/alpha_asli)) * xm
lpareto = function(alpha) {
x = xpareto
xm = min(x)
n = length(x)
llik = -sum(log(alpha * xm^alpha / x^(alpha + 1)))
return(llik)
}
estpareto = mle(minuslogl = lpareto, start = list(alpha = 1), method = "L-BFGS-B", lower = 0.0001)
summary(estpareto)
set.wd("D:\UNAIR\SEMESTER 4\Datmin")
set.wd("D:/UNAIR/SEMESTER 4/Datmin")
setwd("D:/UNAIR/SEMESTER 4/Datmin")
data_prak = read.table("data.txt", header = TRUE)
View(data_prak)
D1 = dist(data, method = "euclidean", diag = TRUE, upper = FALSE)
D1 = dist(data, method = "euclidean", diag = TRUE, upper = FALSE)
D1 = dist(data_prak, method = "euclidean", diag = TRUE, upper = FALSE)
D2 = dist(data_prak, method = "manhattan", diag = TRUE, upper = FALSE)
D3 = dist(data_prak, method = "minkowski", diag = TRUE, upper = FALSE)
D1
D2
D3
Klaster1 = hclust(D1, method = "single")
Klaster2 = hclust(D1, method = "complete")
Klaster3 = hclust(D1, method = "average")
plot(Klaster1)
plot(Klaster2)
plot(Klaster3)
