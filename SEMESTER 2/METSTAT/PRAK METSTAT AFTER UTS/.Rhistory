binom.test(x=8, n=20, p=1/2)
zodiac_signs <- C("Aries", "Taurus", "Libra", "Gemini", "Cancer", "Leo", "Virgo", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces")
zodiac_signs <- C("Aries", "Taurus", "Libra", "Gemini", "Cancer", "Leo", "Virgo", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces")
zodiac_signs <- c("Aries", "Taurus", "Libra", "Gemini", "Cancer", "Leo", "Virgo", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces")
respondent_counts<- C(29, 24, 22, 19, 21, 18, 19, 20, 23, 18, 20, 23)
zodiac_signs <- c("Aries", "Taurus", "Libra", "Gemini", "Cancer", "Leo", "Virgo", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces")
respondent_counts<- c(29, 24, 22, 19, 21, 18, 19, 20, 23, 18, 20, 23)
n <- sum(respondent_counts)
expected_counts <- rep(n/length(respondent_counts), length(respondent_counts)) / n
chisq_result <- chisq.test(respondent_counts, p = expected_counts)
chisa_result
zodiac_signs <- c("Aries", "Taurus", "Libra", "Gemini", "Cancer", "Leo", "Virgo", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces")
respondent_counts<- c(29, 24, 22, 19, 21, 18, 19, 20, 23, 18, 20, 23)
n <- sum(respondent_counts)
expected_counts <- rep(n/length(respondent_counts), length(respondent_counts)) / n
chisq_result <- chisq.test(respondent_counts, p = expected_counts)
chisq_result
a <- c(250, 50, 300)
b <- c(200, 1000, 1200)
c <- c(450, 1050, 1500)
matrik <- cbind(a, b, c)
dimnames(matrik) <- list(Jenis_Bacaan = c("Fiction", "Non-Fiction", "Total"), Jenis_Kelamin = c("Male", "Female", "Total"))
matrik
Uji1_a=chisq.test(matrik,correct=TRUE)
Uji1_a
Uji1_a$observed
Uji1_a$expectedV
x <- c(2,1,5,0)
y <- c(5,3,6,2)
data_pearson <- cbind(x, y)
dimnames(data_pearson) = list(c("1", "2", "3", "4"), c("x", "y"))
data_pearson
Uji2=cor.test(x, y, alternative = "two.sided", method = "pearson", conf.level = 0.90)
Uji2
data_praktikum_3 <- data.frame(
kedisiplinanX = c(75, 45, 44, 70, 75, 64, 80, 77, 92, 66),
kinerjaY = c(80, 45, 34, 80, 70, 65, 79, 76, 89, 72)
)
data_praktikum_3
x=data_praktikum_3$`kedisiplinanX`
y=data_praktikum_3$`kinerjaY`
Uji3=cor.test(x,y,alternative="two.sided", method = "spearman", exact = FALSE, conf.level = 0.95)
Uji3
data.praktikum.4 <- read.csv("D:/UNAIR/SEMESTER 2/METSTAT/praktikum m5/data praktikum 4.txt", sep="")
View(data.praktikum.4)
x = data.praktikum.4$pewawancara_1
y = data.praktikum.4$pewawancara_2
Uji4=cor.test(x,y,alternative = "two.sided", method = "kendall", exact = FALSE, conf.level = 0.95)
Uji4
data.praktikum.4 <- data.frame(
pewawancara_1 = c(7, 1.5, 8, 10, 9, 6, 5, 3, 1.5, 4),
pewawancara_2 = c(5, 2, 6, 8, 7, 9.5, 9.5, 3.5, 1, 3.5)
)
x = data.praktikum.4$pewawancara_1
y = data.praktikum.4$pewawancara_2
Uji4=cor.test(x,y,alternative = "two.sided", method = "kendall", exact = FALSE, conf.level = 0.95)
Uji4
n1=30
N1=300
sigma_yi_1=25
p1=sigma_yi_1/n1
q1=1-p1
B1=2*sqrt((1-n1/N1)*(p1*q1/(n2-1)))
n1=30
N1=300
sigma_yi_1=25
p1=sigma_yi_1/n1
q1=1-p1
B1=2*sqrt((1-n1/N1)*(p1*q1/(n1-1)))
p1
B1
cavities=c(0,4,2,3,2,0,3,4,1,1)
n2=length(cavities)
N2=1000
sigma_yi_2=sum(cavities)
miu2=sigma_yi_2/n2
sigma2_2=var(cavities)
B2=2*sqrt((1-n2/N2)*sigma2_2/n2)
miu2
B2
N3=621
n3=60
sigma_yi_3=11
#------------------------------
p3=sigma_yi_3/n3
q3=1-p3
B3=2*sqrt((1-n3/N3)*(p3*q3/(n3-1)))
#------------------------------
p3
B3
B4=0.08
p4=0.2
N4=N3
#------------------------------
q4=1-p4
D4=B4^2/4
n4=(N4*p4*q4)/((N4-1)*D4+p4*q4)
#------------------------------
n4
n4_int=ceiling(n4)
n4_int
n1=200
N1=2000
sigma_yi_1=132
p1=sigma_yi_1/n1
q1=1-p1
B1=2*sqrt((1-n1/N1)*(p1*q1/(n1-1)))
p1
B1
N2=N1
sigma_yi_2=sigma_yi_1
B2=0.01
p2=p1
#------------------------------
q2=1-p2
D2=B2^2/4
n2=(N2*p2*q2)/((N2-1)*D2+p2*q2)
#------------------------------
n2
n2_int=ceiling(n2)
n2_int
# Create the vector
Amount_of_fill <- c(12.00, 11.91, 11.87, 12.05, 11.75, 11.85, 11.97, 11.98, 12.01, 11.87, 11.93,11.98, 12.01, 12.03, 11.98, 11.91, 11.95, 11.87, 12.03, 11.98,11.87, 11.93, 11.97, 12.05, 12.01, 12.00, 11.90, 11.94, 11.93, 12.02, 11.80, 11.83, 11.88, 11.89, 12.05, 12.04)
yi_3 = data.frame(Amount_of_fill)
N3=1800
n3=36
sigma_yi_3=sum(yi_3)
#------------------------------
miu3=sigma_yi_3/n3
var_3=var(yi_3)
B3=2*sqrt((1-n3/N3)*var_3/n3)
#------------------------------
miu3
B3
N=c(65, 42, 93, 25)
N_Tot = sum(N)
n = c (14, 9, 21,6)
delinquent = c(4, 2, 8, 1)
p=vector(.4)
N=c(65, 42, 93, 25)
N_Tot = sum(N)
n = c (14, 9, 21,6)
delinquent = c(4, 2, 8, 1)
p=vector(,4)
Np =vector (,4)
sum_Np = 0
for ( i in 1 : 4){
p[i]=delinquent[i]/n[i]
Np [i]=N[i]*p[i]
sum_Np=sum_Np+Np[i]
}
p_st=(1/N_Tot)*sum_Np
p
sum_Np
p_st
N=c(65, 42, 93, 25)
N_Tot = sum(N)
n = c (14, 9, 21,6)
delinquent = c(4, 2, 8, 1)
p=vector(,4)
Np =vector (,4)
sum_Np = 0
for ( i in 1 : 4){
p[i]=delinquent[i]/n[i]
Np [i]=N[i]*p[i]
sum_Np=sum_Np+Np[i]
}
p_st=(1/N_Tot)*sum_Np
p
sum_Np
p_st
sum_pst = 0
pst=vector (,4)
for (i in 1:4){
pst [i]=N[i]^2*(1-n[i]/N[i])*((p[i]*q[i])/(n[i]-1))
sum_pst=sum_pst+pst[i]
}
stratum1=c(97,42,25,105,27,45,53,67,125,92,86,43,59,21)
M1=86
m1=14
var1=var(stratum1)
stratum2=c(125,67,256,310,220,142,155,96,47,236,352,190)
M2=72
m2=12
var2=var(stratum2)
stratum3=c(142,310,495,320,196,256,440,510,396)
M3=52
m3=9
var3=var(stratum3)
stratum4=c(167,220,780,655,540)
M4=30
m4=5
var4=var(stratum4)
tau=M1*sum(stratum1)/m1+M2*sum(stratum2)/m2+M3*sum(stratum3)/m3+M4*sum(stratum4)/m4
V_Nybarst=M1^2*(1-m1/M1)*(var1/m1)+M2^2*(1-m2/M2)*(var2/m2)+M3^2*(1-m3/M3)*(var3/m3)+M4^2*(1-m4/M4)*(var4/m4)
V_Nybarst
B_=2*sqrt(V_Nybarst)
tau
B_
N=c(65, 42, 93, 25)
N_Tot = sum(N)
n = c (14, 9, 21,6)
delinquent = c(4, 2, 8, 1)
p=vector(,4)
Np =vector (,4)
sum_Np = 0
for ( i in 1 : 4){
p[i]=delinquent[i]/n[i]
Np [i]=N[i]*p[i]
sum_Np=sum_Np+Np[i]
}
p_st=(1/N_Tot)*sum_Np
p
sum_Np
p_st
sum_pst = 0
pst=vector (,4)
for (i in 1:4){
pst [i]=N[i]^2*(1-n[i]/N[i])*((p[i]*q[i])/(n[i]-1))
sum_pst=sum_pst+pst[i]
}
N=c(65, 42, 93, 25)
N_Tot = sum(N)
n = c (14, 9, 21,6)
delinquent = c(4, 2, 8, 1)
p=vector(,4)
Np =vector (,4)
sum_Np = 0
for ( i in 1 : 4){
p[i]=delinquent[i]/n[i]
Np [i]=N[i]*p[i]
sum_Np=sum_Np+Np[i]
}
p_st=(1/N_Tot)*sum_Np
p
sum_Np
p_st
sum_pst = 0
pst=vector (,4)
for (i in 1:4){
pst [i]=N[i]^2*(1-n[i]/N[i])*((p[i]*p[i])/(n[i]-1))
sum_pst=sum_pst+pst[i]
}
V_pst=(1/N_Tot^2)*sum_pst
B=2*sqrt(V_pst)
B
N=c(65, 42, 93, 25)
N_Tot = sum(N)
n = c (14, 9, 21,6)
delinquent = c(4, 2, 8, 1)
p=vector(,4)
Np =vector (,4)
sum_Np = 0
for ( i in 1 : 4){
p[i]=delinquent[i]/n[i]
Np [i]=N[i]*p[i]
sum_Np=sum_Np+Np[i]
}
p_st=(1/N_Tot)*sum_Np
p
sum_Np
p_st
sum_pst = 0
pst=vector (,4)
for (i in 1:4){
pst [i]=N[i]^2*(1-n[i]/N[i])*((p[i])/(n[i]-1))
sum_pst=sum_pst+pst[i]
}
V_pst=(1/N_Tot^2)*sum_pst
B=2*sqrt(V_pst)
B
N=c(65, 42, 93, 25)
N_Tot = sum(N)
n = c (14, 9, 21,6)
delinquent = c(4, 2, 8, 1)
p=vector(,4)
Np =vector (,4)
sum_Np = 0
for ( i in 1 : 4){
p[i]=delinquent[i]/n[i]
Np [i]=N[i]*p[i]
sum_Np=sum_Np+Np[i]
}
p_st=(1/N_Tot)*sum_Np
p
sum_Np
p_st
sum_pst = 0
pst=vector (,4)
for (i in 1:4){
pst [i]=N[i]^2*(1-n[i]/N[i])*((p[i]*p[i])/(n[i]-1))
sum_pst=sum_pst+pst[i]
}
V_pst=(1/N_Tot^2)*sum_pst
B=2*sqrt(V_pst)
B
N=c(65, 42, 93, 25)
N_Tot = sum(N)
n = c (14, 9, 21,6)
delinquent = c(4, 2, 8, 1)
p=vector(,4)
Np =vector (,4)
sum_Np = 0
for ( i in 1 : 4){
p[i]=delinquent[i]/n[i]
Np [i]=N[i]*p[i]
sum_Np=sum_Np+Np[i]
}
p_st=(1/N_Tot)*sum_Np
p
sum_Np
p_st
sum_pst = 0
pst=vector (,4)
for (i in 1:4){
pst[i]=N[i]^2*(1-n[i]/N[i])*((p[i]*(1-p[i]))/(n[i]-1))
sum_pst=sum_pst+pst[i]
}
V_pst=(1/N_Tot^2)*sum_pst
B=2*sqrt(V_pst)
B
m=c(3,7,11,9,2,12,14,3,5,9,8,6,3,2,1,4,12,6,5,8)
y=c(50,110,230,140,60,280,240,45,60,230,140,130,70,50,10,60,280,150,110,120)
n=20
N=96
sum_yi=sum(y)
sum_mi=sum(m)
y_bar=sum_yi/sum_mi
y_bar
mbar=mean(m)
yyi2=vector(,n)
sum_yyi2=0
for (i in 1:n){
yyi2[i]=(y[i]-y_bar*m[i])^2
sum_yyi2=sum_yyi2+yyi2[i]
}
sr2=1/(n-1)*sum_yyi2
V_ybar=(1-n/N)*(sr2/(n*mbar^2))
B=2*sqrt(V_ybar)
B
M=N*mbar
tau=M*y_bar
tau
#------------
y_bart=mean(y)
var_t=var(y)
V_Nybart=N^2*(1-n/N)*var_t/n
B_=2*sqrt(V_Nybart)
B_
B_new=0.05
D=B_new^2*mbar_^2/4
SIGN.test(data1, md = 100, alternative = "two.sided")
library(BSDA)
install.packages("BSDA")
SIGN.test(data1, md = 100, alternative = "two.sided")
SIGN.test(data1, md = 100, alternative = "two.sided")
#SOAL 1
Oks= c(90,110, 105, 85, 95, 100, 105, 120, 150, 85, 100, 110, 90, 75, 105, 120, 100, 105, 90, 100)
library(BSDA)
SIGN.test(Oks, md = 100, alternative = "two.sided")
SIGN.test(Oks, md = 100, alternative = "two.sided")
SIGN.test(data1, md = 100, alternative = "two.sided")
SIGN.test(tes, md = 100, alternative = "two.sided")
Oks
Oks= c(90,110, 105, 85, 95, 100, 105, 120, 150, 85, 100, 110, 90, 75, 105, 120, 100, 105, 90, 100)
library(BSDA)
SIGN.test(Oks, md = 100, alternative = "two.sided")
data1= c(90,110, 105, 85, 95, 100, 105, 120, 150, 85, 100, 110, 90, 75, 105, 120, 100, 105, 90, 100)
library(BSDA)
SIGN.test(data1, md = 100, alternative = "two.sided")
x <- c(5.1, 5.3, 5.2, 4.9, 4.8, 4.7, 4.5, 5.0, 4.6, 4.4, 5.4)
y <- c(23, 31, 27, 18, 17, 16, 20, 29, 12, 15, 29)
data_pearson
x <- c(5.1, 5.3, 5.2, 4.9, 4.8, 4.7, 4.5, 5.0, 4.6, 4.4, 5.4)
y <- c(23, 31, 27, 18, 17, 16, 20, 29, 12, 15, 29)
Uji2=cor.test(x, y, alternative = "two.sided", method = "pearson", conf.level = 0.90)
Uji2
x <- c(5.1, 5.3, 5.2, 4.9, 4.8, 4.7, 4.5, 5.0, 4.6, 4.4, 5.4)
y <- c(23, 31, 27, 18, 17, 16, 20, 29, 12, 15, 29)
Uji1=cor.test(x, y, alternative = "two.sided", method = "pearson", conf.level = 0.95)
Uji1
Uji2=cor.test(x,y,alternative = "two.sided", method = "kendall", exact = FALSE, conf.level = 0.95)
Uji2
Uji3=cor.test(x,y,alternative="two.sided", method = "spearman", exact = FALSE, conf.level = 0.95)
Uji3
data1= c(90,110, 105, 85, 95, 100, 105, 120, 150, 85, 100, 110, 90, 75, 105, 120, 100, 105, 90, 100)
library(BSDA)
SIGN.test(data1, md = 100, alternative = "two.sided")
x <- c(5.1, 5.3, 5.2, 4.9, 4.8, 4.7, 4.5, 5.0, 4.6, 4.4, 5.4)
y <- c(23, 31, 27, 18, 17, 16, 20, 29, 12, 15, 29)
Uji1=cor.test(x, y, alternative = "two.sided", method = "pearson", conf.level = 0.95)
Uji1
Uji2=cor.test(x,y,alternative = "two.sided", method = "kendall", exact = FALSE, conf.level = 0.95)
Uji2
Uji3=cor.test(x,y,alternative="two.sided", method = "spearman", exact = FALSE, conf.level = 0.95)
Uji3
# Regresi Linear Sederhana
# Load Data
library(readr)
install.packages("readr")
clear
# Regresi Linear Sederhana
# Load Data
library(readr)
Salary_Data <- read_csv("D:/UNAIR/SEMESTER 2/METSTAT/PRAK METSTAT AFTER UTS/Salary Data.csv")
head(Salary_Data)
install.packages("ggplot2")
# Subset Data
x = Salary_Data$YearsExperience
y = Salary_Data$Salary
library(ggplot2)
ggplot(Salary_Data, aes(x, y)) +
geom point() +
# Subset Data
x = Salary_Data$YearsExperience
y = Salary_Data$Salary
library(ggplot2)
ggplot(Salary_Data, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm")
# Subset Data
x = Salary_Data$YearsExperience
y = Salary_Data$Salary
library(ggplot2)
ggplot(Salary_Data, aes(x, y)) + geom_point() + geom_smooth(method = "lm")
# Regresi Manual
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
sxy <- sum((x - mean_x) * (y - mean_y))
sxx <- sum((x - mean_x) * 2)
b1 <- sxy / sxx
return(b1)
}
intercept <- function(x, y, b1){
b0 <- mean(y) - (b1 * mean(x))
return(b0)
}
print("b1")
slope(x, y)
print("b0")
intercept(x, y, slope(x, y))
# Regresi Manual
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
sxy <- sum((x - mean_x) * (y - mean_y))
sxx <- sum((x - mean_x) ^ 2)
b1 <- sxy / sxx
return(b1)
}
intercept <- function(x, y, b1){
b0 <- mean(y) - (b1 * mean(x))
return(b0)
}
print("b1")
slope(x, y)
print("b0")
intercept(x, y, slope(x, y))
# Regresi with Built-in
model = lm(y = x, data = Salary_Data)
# Regresi with Built-in
model = lm(y ~ x, data = Salary_Data)
summary(model)
model$coefficients
summary(model)$r.squared
resid(model)
rmarkdown::render("regresi_linear_berganda", output_format = "pdf_document")
rmarkdown::render("regresi_linear_berganda.R", output_format = "pdf_document")
getwd()
setwd("D:/UNAIR/SEMESTER 2/METSTAT/PRAK METSTAT AFTER UTS")
rmarkdown::render("regresi_linear_berganda.R", output_format = "pdf_document")
> rmarkdown::render("regresi_linear_berganda.R", output_format = "pdf_document")
q
rmarkdown::render("regresi_linear_berganda.R", output_format = "pdf_document")
rmarkdown::render("regresi_linear_berganda.R", output_format = "pdf_document")
# nomor 1
data1 <- data.frame(penjualan <- c(72,76,78,70,68,80,82,65,62,90),
jumlah_iklan <- c(12,11,15,10,11,16,14,8,8,18),
jumlah_endorse <- c(5,8,6,5,3,9,12,14,3,10))
model1 <- lm(penjualan ~ jumlah_iklan + jumlah_endorse,data1)
summary(model1)
rmarkdown::render("tes.Rmd", output_format = "pdf_document")
library(readr)
concrete <- read_csv("D:/UNAIR/SEMESTER 2/METSTAT/PRAK METSTAT AFTER UTS/concrete.csv")
head(concrete)
model2 <- lm(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete)
summary(model2)
library(tidyverse)
library(datarium)
data("marketing", package = "datarium")
head(marketing, 4)
Y = marketing$sales
X1 = marketing$youtube
X2 = marketing$newspaper
X3 = marketing$facebook
#Building Model
model3 <- lm(Y ~ X1 + X2 + X3, data = marketing)
summary(model3)
#Delete variabel newspaper
model3b <- lm(Y ~ X1 + X3, data = marketing)
summary(model3b)
data4 <- data.frame(y <- c(1.45, 1.93, 0.81, 0.61, 1.55, 0.95, 0.45, 1.14, 0.74, 0.98, 1.41, 0.81, 0.89, 0.68, 1.39, 1.53, 0.91, 1.49, 1.38, 1.73, 1.11, 1.68, 0.66, 0.69, 1.98),
x1 <- c(0.58, 0.86, 0.29, 0.2, 0.56, 0.28, 0.08, 0.41, 0.22, 0.35, 0.59, 0.22, 0.26, 0.12, 0.65, 0.7, 0.3, 0.7, 0.39, 0.72, 0.45, 0.81, 0.04, 0.2, 0.95),
x2 <- c(0.71, 0.13, 0.79, 0.2, 0.56, 0.92, 0.01, 0.6, 0.7, 0.73, 0.13, 0.96, 0.27, 0.21, 0.88, 0.30, 0.15, 0.09, 0.17, 0.25, 0.30, 0.32, 0.82, 0.98, 0.00))
model4 <- lm(y ~ x1 + x2, data = data4)
summary(model4)
rmarkdown::render("tes.Rmd", output_format = "pdf_document")
\DeclareUnicodeCharacter{2212}{\ensuremath{-}}
$\Phi^{-1}(u)$
-   Model: strength = −23.3312 + 0.1198 × (cement) + 0.1039 × (slag) + 0.0879 × (ash) - 0.1499 × (water) + 0.2922 × (superplastic) + 0.0181 × (coarseagg) + 0.0202 × (fineagg) + 0.1142 × (age)
\DeclareUnicodeCharacter{2212}{\ensuremath{-}}
